- name: Configuring hostname
  ansible.builtin.shell: set-hostname "{{COMPONENT}}-{{ENV}}"

- name: disabling the default module nodejs version
  ansible.builtin.shell: dnf module disable nodejs -y

- name: Enabling the module nodejs version 20
  ansible.builtin.shell: dnf module enable nodejs:20 -y

- name: Installing nodejs 
  ansible.builtin.package:
    name: nodejs
    state: present

- name: Add application user on remote backend mysql-server
  ansible.builtin.user:
    name: expense
    state: present
    shell: /bin/bash

- name: App Pre-requisite Tasks
  ansible.builtin.include_role:           # through this we can call any role inside another role
    name: common                          # Name of the role to be called
    tasks_from: pre-req.yml               # Name of the file to be called inside the role

- name: Copy file with owner and permissions
  ansible.builtin.template:
    src: backend.service
    dest: /etc/systemd/system/backend.service
    owner: root
    group: root
    mode: '0644'

- name: Ensure app directory is owned by expense
  ansible.builtin.file:
    path: "{{ APP_PATH }}"
    owner: expense
    group: expense
    recurse: yes
    mode: '0755'

- name: Ensure package-lock.json is writable by expense
  ansible.builtin.file:
    path: "{{ APP_PATH }}/package-lock.json"
    owner: expense
    group: expense
    mode: '0644'
  when: ansible.builtin.stat(path="{{ APP_PATH }}/package-lock.json").stat.exists

- name: Install npm packages
  community.general.npm:
    path: "{{ APP_PATH }}"
  become_user: expense

- name: Installing mysql-server service
  ansible.builtin.package:
    name: mysql-server
    state: present

- name: Inject the mysql
  ansible.builtin.shell: mysql -h mysql-dev.devsecopswithshri.site -uroot -pExpenseApp@1 < /app/schema/backend.sql

- name: Starting "{{COMPONENT}}-{{ENV}}" service
  ansible.builtin.systemd_service:
    name: backend
    state: restarted
    enabled: true
    daemon_reload: yes
